<?php

namespace App\Services;

use App\Models\Ticket;
use Illuminate\Database\Eloquent\Collection;

/**
 * TicketService
 *
 * Business logic for ticket operations.
 */
class TicketService
{
    /**
     * Create a new ticket.
     */
    public function createTicket(array $data): Ticket
    {
        // The ticket_number will be auto-generated by the model's boot method
        $ticket = Ticket::create($data);

        return $ticket;
    }

    /**
     * Update an existing ticket.
     */
    public function updateTicket(Ticket $ticket, array $data): Ticket
    {
        // Don't allow updating ticket_number, user_id, or used_at manually
        unset($data['ticket_number'], $data['user_id'], $data['used_at']);

        $ticket->update($data);

        return $ticket;
    }

    /**
     * Delete a ticket.
     */
    public function deleteTicket(Ticket $ticket): bool
    {
        return $ticket->delete();
    }

    /**
     * Validate a ticket and mark it as used.
     */
    public function validateTicket(Ticket $ticket): Ticket
    {
        if (!$ticket->isValid()) {
            throw new \Exception('Ticket is not valid for validation');
        }

        if ($ticket->status === 'used' || $ticket->used_at !== null) {
            throw new \Exception('Ticket has already been used');
        }

        // Mark ticket as used
        $ticket->markAsUsed();

        return $ticket;
    }

    /**
     * Get tickets for a specific user.
     */
    public function getUserTickets(int $userId, array $filters = []): Collection
    {
        $query = Ticket::where('user_id', $userId);

        // Apply filters
        if (isset($filters['status'])) {
            $query->where('status', $filters['status']);
        }

        if (isset($filters['access_gate'])) {
            $query->where('access_gate', $filters['access_gate']);
        }

        if (isset($filters['expired'])) {
            if ($filters['expired']) {
                $query->where('valid_until', '<', now());
            } else {
                $query->where('valid_until', '>=', now());
            }
        }

        return $query->orderBy('created_at', 'desc')->get();
    }

    /**
     * Get ticket statistics for a user.
     */
    public function getUserTicketStats(int $userId): array
    {
        $baseQuery = Ticket::where('user_id', $userId);

        return [
            'total' => (clone $baseQuery)->count(),
            'active' => (clone $baseQuery)
                ->where('status', 'active')
                ->where('valid_until', '>', now())
                ->count(),
            'expired' => (clone $baseQuery)
                ->where('valid_until', '<', now())
                ->count(),
            'used' => (clone $baseQuery)
                ->where('status', 'used')
                ->count(),
            'inactive' => (clone $baseQuery)
                ->where('status', '!=', 'active')
                ->where('status', '!=', 'used')
                ->count(),
        ];
    }

    /**
     * Check if a ticket number already exists.
     */
    public function ticketNumberExists(string $ticketNumber): bool
    {
        return Ticket::where('ticket_number', $ticketNumber)->exists();
    }

    /**
     * Generate today's ticket count for ticket number generation.
     */
    public function getTodayTicketCount(): int
    {
        return Ticket::whereDate('created_at', now()->toDateString())->count();
    }

    /**
     * Bulk expire tickets that are past their valid_until date.
     */
    public function expireOldTickets(): int
    {
        return Ticket::where('valid_until', '<', now())
            ->where('status', 'active')
            ->update(['status' => 'expired']);
    }

    /**
     * Get tickets expiring soon (within specified hours).
     */
    public function getExpiringTickets(int $hoursFromNow = 24): Collection
    {
        return Ticket::where('status', 'active')
            ->where('valid_until', '>', now())
            ->where('valid_until', '<=', now()->addHours($hoursFromNow))
            ->orderBy('valid_until', 'asc')
            ->get();
    }
}
